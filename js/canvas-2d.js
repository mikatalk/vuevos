(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["canvas-2d"],{"280b":function(e,t,a){"use strict";a("f594")},"56a2":function(e,t,a){"use strict";a("d091")},"627a":function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"view view-canvas-2d"},[a("title-box",[e._v("Make an Egg using Canvas 2D API")]),a("section",{staticClass:"square-container"},[a("egg-canvas-2d")],1),a("p",[e._v(" We've looked into making a fried egg with HTML, CSS, SVG. Easy stuff you say? This time we get our hands dirty and go all the way with Javascript! ")]),a("p",[e._v(" For that we use the "),a("c",[e._v("canvas")]),e._v(" element that exposes a 2D rendering engine to Javascript. ")],1),a("pre",[e._v("      "),a("code",{domProps:{innerHTML:e._s(e.highlightJS(e.snippet1))}},[e._v("\n      ")]),e._v("\n    ")]),a("p",[e._v(" All we do is query the canvas element and use it to request the '2D' rendering context. We save this reference for later as we will need it to execute drawing commands. ")]),a("pre",[e._v("      "),a("code",{domProps:{innerHTML:e._s(e.highlightJS("const size = container.getBoundingClientRect().width;\nconst scale = size / 100;\n// make it a square by applying the width as the height\ncanvas.width = size;\ncanvas.height = size;"))}},[e._v("\n      ")]),e._v("\n    ")]),a("p",[e._v(" This config step seems a bit more involved but it is in a way similar to setting the viewbox in a SVG as seen in a "),a("router-link",{staticClass:"link",attrs:{to:"/canvas-2d"}},[e._v(" previous chapter ")]),e._v(". ")],1),a("p",[e._v(" We get the size of the parent container and set it to the canvas. Be aware this operation does not set the computed on screen size of the canvas, instead it sets the pixel density of the rendered image. ")]),a("p",[e._v(" For example, a canvas could have a width attribute value of 500 units, but a 250px width in CSS. In this case your canvas would have a pixel density of 2 per pixel and probably well suited for retina displays. ")]),a("p",[e._v(" This type of situation can be handled by checking the value of "),a("c",[e._v("window.devicePixelRatio")]),e._v(". Now keep in mind the higher it is, the more pixel there are to render and it can quickly have an impact on performance. With great power comes great responsibility. Note how we define a scale ratio using 100 as a base, we will come back to it shortly. ")],1),a("p",[e._v(" The rest of the code is fairly straightforward. Each time we want to make a draw operation, we set the main settings first: "),a("br"),a("c",[e._v("fillStyle")]),e._v(" - background color, "),a("br"),a("c",[e._v("stroke")]),e._v(" - border color, "),a("br"),a("c",[e._v("lineWidth ")]),e._v(" - border size etc... "),a("br"),e._v(" With these we can draw a pink rectangle for the background, and a yellow circle for the yolk. ")],1),a("p",[e._v(" Now remember the earlier chapter on "),a("router-link",{staticClass:"link",attrs:{to:"/svg-path"}},[e._v(" SVG Paths ")]),e._v("? We used a string of commands to define our egg path. Here we do the exact same thing but instead do it with Javascript variables: ")],1),a("pre",[e._v("      "),a("code",{domProps:{innerHTML:e._s(e.highlightJS("// Our path was draw in a 100x100 square but now,\n// we're drawing to a scaled canvas\n// so we need to adjust our scale\ncontext.save();\ncontext.scale(scale, scale);\n// Let's start drawing the path\ncontext.moveTo(35,20);\ncontext.bezierCurveTo(48,7, 76,17, 79,31);\ncontext.bezierCurveTo(83,45, 81,56, 84,68);\ncontext.bezierCurveTo(86,80, 68,94, 57,90);\ncontext.bezierCurveTo(45,86, 27,87, 23,77);\ncontext.bezierCurveTo(17,55, 23,33, 35,20);\ncontext.fill();\ncontext.stroke();\n// We're done drawing, let's reset the scale for later\ncontext.restore();"))}},[e._v("\n      ")]),e._v("\n    ")]),a("p",[e._v(" The only caveat we need to deal here is that our path string (or coordinates) were generated under a 100 by 100 unit viewport. That is why before executing the drawing commands, we scale the entire context using the scale ratio calculated earlier. ")]),a("p",[e._v(" Before scaling the context, we save its initial state. Once we're done with drawing operations, we can restore the context to before the scale alteration. ")]),a("p",[e._v(" We used the bezierCurveTo command here. Alternatively we could also have drawn the same shape with a single drawing command and using the same string as we did previously in SVG. ")]),a("pre",[e._v("      "),a("code",{domProps:{innerHTML:e._s(e.highlightJS("const path = new Path2D('M35,20 C48,7 76,17 79,31 C83,45 81,56 84,68 C86,80 68,94 57,90 C45,86 27,87 23,77 C17,55 23,33 35,20 Z');\ncontext.fill(path);\ncontext.stroke(path);"))}},[e._v("\n      ")]),e._v("\n    ")]),a("p",[e._v(" As you can see, canvas unleashes the power of Javascript and we can have much more dynamic drawings compared to our HTML/CSS and SVG eggs. The drawback however is that we now have to put more effort in managing the responsive behavior of our canvas and its resolution. ")]),a("section",{staticClass:"square-container"},[a("egg-canvas-2d")],1),a("p",[e._v(" At some point you may evolve into an egg frying degenerate and might even start cooking hundreds of them, every 16 milliseconds. That's when you start looking for more dedicated tools and tap into the power of the GPU. This is what we cover in the next section about "),a("router-link",{staticClass:"link",attrs:{to:"/webgl-2d"}},[e._v(" 2D drawing in WebGL ")])],1),e._m(0)],1)},i=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[a("a",{staticClass:"btn",attrs:{href:"https://github.com/mikatalk/vuevos/blob/main/src/eggs/EggCanvas2D.vue"}},[e._v(" Get the code and contribute. ")])])}],o="// Query the canvas from the DOM tree  \nconst canvas = container.querySelector('canvas');\n// Get the 2D context for the canvas\nconst context = canvas.getContext('2d');",r=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},s=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"egg-canvas-2d"},[a("canvas")])}],c=(a("cb29"),{name:"EggCanvas2D",mounted:function(){var e=this.$el,t=e.getBoundingClientRect().width,a=t/100,n=e.querySelector("canvas");n.width=t,n.height=t;var i=n.getContext("2d");i.fillStyle="hotpink",i.fillRect(0,0,t,t),i.fillStyle="white",i.strokeStyle="whitesmoke",i.lineWidth=.6*a,i.beginPath(),i.save(),i.scale(a,a),i.moveTo(35,20),i.bezierCurveTo(48,7,76,17,79,31),i.bezierCurveTo(83,45,81,56,84,68),i.bezierCurveTo(86,80,68,94,57,90),i.bezierCurveTo(45,86,27,87,23,77),i.bezierCurveTo(17,55,23,33,35,20),i.fill(),i.stroke(),i.restore(),i.fillStyle="gold",i.strokeStyle="#fad300",i.lineWidth=2*a,i.beginPath(),i.arc(t/2,t/2,15*a,0,2*Math.PI,!0),i.fill(),i.stroke()}}),l=c,h=(a("280b"),a("2877")),d=Object(h["a"])(l,r,s,!1,null,null,null),v=d.exports,u=a("5a37"),g=a("72e3"),w=a("1cf6"),p={name:"ViewSVG",components:{"egg-canvas-2d":v,"title-box":g["a"],c:w["a"]},data:function(){return{snippet1:o}},methods:{highlightJS:u["b"]}},f=p,m=(a("56a2"),Object(h["a"])(f,n,i,!1,null,null,null));t["default"]=m.exports},"81d5":function(e,t,a){"use strict";var n=a("7b0b"),i=a("23cb"),o=a("50c4");e.exports=function(e){var t=n(this),a=o(t.length),r=arguments.length,s=i(r>1?arguments[1]:void 0,a),c=r>2?arguments[2]:void 0,l=void 0===c?a:i(c,a);while(l>s)t[s++]=e;return t}},cb29:function(e,t,a){var n=a("23e7"),i=a("81d5"),o=a("44d2");n({target:"Array",proto:!0},{fill:i}),o("fill")},d091:function(e,t,a){},f594:function(e,t,a){}}]);
//# sourceMappingURL=canvas-2d.js.map